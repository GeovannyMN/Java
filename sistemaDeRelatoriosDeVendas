/*
  Criando um sistema de relatórios onde se informa uma venda com seu valor, tipo de pagamento e horários.
  O sistema armazena essas informações e depois deve retornar:
  Relatórios de todas as vendas existentes organizados pelo horário
  Relatórios de vendas por tipo de pagamento organizados pelo horário
*/

import java.util.Date;
import java.util.Random;
//import java.util.Scanner;
import java.util.Vector;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class App {
    public static void main(String[] args){

        Vector<Venda> vendas = new Vector<>();
        

        Venda v1 = new Venda(123.45f, "dinheiro", "09:35");
        vendas.add(v1);

        Venda v2 = new Venda(456.78f, "dinheiro", "10:35");
        vendas.add(v2);

        Venda v3 = new Venda(78.90f, "debito", "14:00");
        vendas.add(v3);

        Venda v4 = new Venda(0.99f, "pix", "14:40");
        vendas.add(v4);

        RelatorioValorMaior(vendas, 1f);
        RelatorioFormaDePagamento(vendas, "dinheiro");
        RelatorioPorHorario(vendas, 10, 40);
    
    }

    public static void RelatorioValorMaior(Vector<Venda> vendas, float valor){
        System.out.println("--- Relatório de Vendas por Valor: " + valor + " ---\n");
        for (Venda venda : vendas){
            if (venda.getValor() > valor) 
            {
                venda.ImprimirVenda();
            }
        }
        System.out.println("-----------------------------------------------------\n");
    }

    public static void RelatorioFormaDePagamento(Vector<Venda> vendas, String fp){
        System.out.println("--- Relatório de Vendas por Forma de Pagamento: " + fp + " ---\n");
        for (Venda venda : vendas){
            if (venda.getFormaDePagamento().equals(fp)) 
            {
                venda.ImprimirVenda();
            }
        }
        System.out.println("-----------------------------------------------------\n");
    }

    public static void RelatorioPorHorario(Vector<Venda> vendas, int horas, int minutos){
        System.out.println("--- Relatório de Vendas por Horário: " + horas + ":" + minutos + " ---\n");
        for (Venda venda : vendas){
            if (venda.getHoras() > horas || (venda.getHoras() == horas && venda.getMinutos() >= minutos) ) 
            {
                venda.ImprimirVenda();
            }
        }
        System.out.println("----------------------------------------------------\n");
    }

    public static class Venda
    {
        int id;
        float valor = 0f;
        String formaDePagamento = "";
        Date hora = new Date();

        SimpleDateFormat formatadorDeData = new SimpleDateFormat("HH:mm");

        Venda()
        {
            this.id = NovoId();
        }

        Venda(float valor, String formaDePagamento, String hora)
        {
            this.id = NovoId();
            this.valor = valor;
            this.formaDePagamento = formaDePagamento;
            try{
                this.hora = formatadorDeData.parse(hora);
            }
            catch (ParseException e)
            {
                e.printStackTrace();
            } 
        }

        public float getValor() {
            return valor;
        }

        public String getFormaDePagamento() {
            return formaDePagamento;
        }

        public int getHoras() {
            return hora.getHours();
        }

        public int getMinutos()
        {
            return hora.getMinutes();
        }

        protected int NovoId() {
            Random gerador = new Random();
            return gerador.nextInt(99999);
        }

        public void setVenda(float valor, String formaDePagamento, String hora)
        {
            this.valor = valor;
            this.formaDePagamento = formaDePagamento;
            try{
                this.hora = formatadorDeData.parse(hora);
            }
            catch (ParseException e)
            {
                e.printStackTrace();
            } 
        }

        public void ImprimirVenda(){
            System.out.print("Venda " + id + " R$ " + valor + " ");
            System.out.println(hora.getHours() + ":" + hora.getMinutes() + " " + formaDePagamento);
        }

    }
}
